asyncapi: 2.6.0
info:
  title: "The Amazing Labyrinth - Game Interaction API"
  version: "1.1.0"
  description: |
    This specification outlines the event-driven API for real-time communication during a game of 'The Amazing Labyrinth'. 
    Clients send actions to the server on the `client/actions` channel, and the server broadcasts all game state changes and events to all connected clients on the `server/broadcast` channel. 
    Clients must listen to the broadcast channel to synchronize their local game state.

servers:
  production:
    url: "{uri}"
    protocol: websocket
    description: "The game server's WebSocket connection endpoint. The URI is obtained from the Game Management Server."
    variables:
      uri:
        default: "ws://localhost:9000"
        description: "The full connection URI for a specific game server."

channels:
  /client/actions:
    publish:
      summary: "Used by the client to send player actions to the server."
      description: "This is a client-to-server channel where all player-initiated commands are sent. Each message represents a single, specific action, such as connecting to the lobby, pushing a tile, or moving a pawn. The server will process these actions and, if valid, broadcast the resulting state change to all clients."
      message:
        oneOf:
          - $ref: "#/components/messages/connectRequest"
          - $ref: "#/components/messages/pushTileAction"
          - $ref: "#/components/messages/movePawnAction"
          - $ref: "#/components/messages/useBonusAction"
          - $ref: "#/components/messages/toggleAI"

  /server/broadcast:
    subscribe:
      summary: "Used by the server to broadcast game events and state updates to all clients."
      description: "This is a server-to-all-clients channel. Clients must subscribe to this channel to receive all updates regarding the game state, including lobby changes, turn notifications, board updates, and end-of-game results. It is the single source of truth for the game's state."
      message:
        oneOf:
          - $ref: "#/components/messages/lobbyState"
          - $ref: "#/components/messages/gameStarted"
          - $ref: "#/components/messages/gameStateUpdate"
          - $ref: "#/components/messages/playerTurn"
          - $ref: "#/components/messages/actionError"
          - $ref: "#/components/messages/playerDisconnected"
          - $ref: "#/components/messages/bonusSpawned"
          - $ref: "#/components/messages/achievementUnlocked"
          - $ref: "#/components/messages/gameOver"

components:
  messages:
    # Client -> Server Messages
    connectRequest:
      summary: "Action to join the game lobby."
      payload:
        $ref: "#/components/schemas/ConnectRequestPayload"
    pushTileAction:
      summary: "Action to push the extra tile into a row or column."
      payload:
        $ref: "#/components/schemas/PushTileActionPayload"
    movePawnAction:
      summary: "Action to move the player's pawn after pushing a tile."
      payload:
        $ref: "#/components/schemas/MovePawnActionPayload"
    useBonusAction:
      summary: "Action to consume a collected bonus item."
      payload:
        $ref: "#/components/schemas/UseBonusActionPayload"
    toggleAI:
      summary: "Action to enable or disable the AI for the player's pawn."
      payload:
        $ref: "#/components/schemas/ToggleAIPayload"

    # Server -> Client Messages
    lobbyState:
      summary: "Event broadcast when the lobby's player list changes."
      payload:
        $ref: "#/components/schemas/LobbyStatePayload"
    gameStarted:
      summary: "Event broadcast once when the game starts, containing the initial state."
      payload:
        $ref: "#/components/schemas/GameStartedPayload"
    gameStateUpdate:
      summary: "Event broadcast after a player's turn, containing the updated board and player positions."
      payload:
        $ref: "#/components/schemas/GameStateUpdatePayload"
    playerTurn:
      summary: "Event indicating which player's turn it is and providing them with the extra tile."
      payload:
        $ref: "#/components/schemas/PlayerTurnPayload"
    actionError:
      summary: "Event sent to a client that attempted an invalid action."
      payload:
        $ref: "#/components/schemas/ActionErrorPayload"
    playerDisconnected:
      summary: "Event broadcast when a player disconnects or times out."
      payload:
        $ref: "#/components/schemas/PlayerDisconnectedPayload"
    bonusSpawned:
      summary: "Event broadcast when a new bonus appears on the board."
      payload:
        $ref: "#/components/schemas/BonusSpawnedPayload"
    achievementUnlocked:
      summary: "Event broadcast when a player unlocks an achievement."
      payload:
        $ref: "#/components/schemas/AchievementUnlockedPayload"
    gameOver:
      summary: "Event broadcast when the game has ended, containing final scores and stats."
      payload:
        $ref: "#/components/schemas/GameOverPayload"

  schemas:
    # Action Payloads (Client -> Server)
    ConnectRequestPayload:
      type: object
      properties:
        action:
          type: string
          enum: [CONNECT]
          description: "The type of action."
        username:
          type: string
          description: "The desired username for the player."
    PushTileActionPayload:
      type: object
      properties:
        action:
          type: string
          enum: [PUSH_TILE]
        rowOrColIndex:
          type: integer
          description: "The index of the row or column to push (e.g., 1, 3, 5)."
        direction:
          type: string
          enum: [UP, DOWN, LEFT, RIGHT]
          description: "The direction to push the tile from."
    MovePawnActionPayload:
      type: object
      properties:
        action:
          type: string
          enum: [MOVE_PAWN]
        targetCoordinates:
          $ref: "#/components/schemas/Coordinates"
    UseBonusActionPayload:
      type: object
      properties:
        action:
          type: string
          enum: [USE_BONUS]
        bonusType:
          type: string
          enum: [BEAM, PUSH_FIXED, SWAP, PUSH_TWICE]
        # Additional properties might be needed, e.g., 'targetCoordinates' for BEAM or 'targetPlayerId' for SWAP.
    ToggleAIPayload:
      type: object
      properties:
        action:
          type: string
          enum: [TOGGLE_AI]
        enabled:
          type: boolean
          description: "Set to true to enable AI, false to disable."

    # Event Payloads (Server -> Client)
    LobbyStatePayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [LOBBY_STATE]
        players:
          type: array
          items: { $ref: "#/components/schemas/PlayerInfo" }
    GameStartedPayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [GAME_STARTED]
        board: { $ref: "#/components/schemas/GameBoard" }
        players:
          type: array
          items: { $ref: "#/components/schemas/PlayerState" }
        yourTreasureCards:
          type: array
          description: "A personalized list of treasure cards for the receiving client."
          items: { $ref: "#/components/schemas/Treasure" }
    GameStateUpdatePayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [GAME_STATE_UPDATE]
        board: { $ref: "#/components/schemas/GameBoard" }
        players:
          type: array
          items: { $ref: "#/components/schemas/PlayerState" }
    PlayerTurnPayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [PLAYER_TURN]
        playerId:
          type: string
          description: "The ID of the player whose turn it is."
        extraTile:
          $ref: "#/components/schemas/Tile"
    ActionErrorPayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [ACTION_ERROR]
        message:
          type: string
          description: "A human-readable error message explaining why the action was invalid."
    PlayerDisconnectedPayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [PLAYER_DISCONNECTED]
        playerId:
          type: string
          description: "The ID of the player who disconnected."
    BonusSpawnedPayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [BONUS_SPAWNED]
        bonus: { $ref: "#/components/schemas/Bonus" }
        position: { $ref: "#/components/schemas/Coordinates" }
    AchievementUnlockedPayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [ACHIEVEMENT_UNLOCKED]
        playerId:
          type: string
        achievement:
          type: string
          enum: [Runner, Pusher, Blocker, TimeWaster, Hattrick]
    GameOverPayload:
      type: object
      properties:
        eventType:
          type: string
          enum: [GAME_OVER]
        ranking:
          type: array
          items: { $ref: "#/components/schemas/RankingEntry" }

    # Reusable Data Schemas
    PlayerInfo:
      type: object
      description: "Basic information about a player, used in the lobby."
      properties:
        id: { type: string, description: "Unique player ID." }
        name: { type: string, description: "Player's username." }
    PlayerState:
      allOf:
        - $ref: "#/components/schemas/PlayerInfo"
        - type: object
          description: "Full state of a player during a game."
          properties:
            position: { $ref: "#/components/schemas/Coordinates" }
            treasuresFound: { type: integer }
    Coordinates:
      type: object
      properties:
        x: { type: integer, description: "The column index (0-based)." }
        y: { type: integer, description: "The row index (0-based)." }
    Tile:
      type: object
      description: "Represents a single tile on the game board."
      properties:
        type: { type: string, enum: [STRAIGHT, CORNER, T_SHAPE], description: "The shape of the path on the tile." }
        orientation: { type: integer, description: "The rotation of the tile in degrees (0, 90, 180, 270)." }
        treasure: { $ref: "#/components/schemas/Treasure" }
        bonus: { $ref: "#/components/schemas/Bonus" }
    GameBoard:
      type: object
      properties:
        size:
          type: object
          properties:
            rows: { type: integer }
            cols: { type: integer }
        tiles:
          type: array
          description: "A 2D array representing the board, with `tiles[y][x]`."
          items:
            type: array
            items: { $ref: "#/components/schemas/Tile" }
    Treasure:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
    Bonus:
      type: object
      properties:
        id: { type: string }
        type: { type: "string", enum: [BEAM, PUSH_FIXED, SWAP, PUSH_TWICE] }
    RankingEntry:
      type: object
      properties:
        playerId: { type: string }
        playerName: { type: string }
        rank: { type: integer }
        points: { type: integer }
        stats:
          type: object
          properties:
            stepsTaken: { type: integer }
            tilesPushed: { type: integer }
            treasuresCollected: { type: integer }