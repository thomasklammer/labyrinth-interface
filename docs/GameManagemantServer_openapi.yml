openapi: 3.0.3
info:
  title: "The Amazing Labyrinth - Game Management Server API"
  description: |
    This API enables the registration, discovery, and lifecycle management of game servers for 'The Amazing Labyrinth'. 
    Game servers use this API to make themselves discoverable, while clients use it to find active games to join.
  version: "1.3.0"
  contact:
    name: "Game DevOps Team"
    url: "https://example.com/support"
    email: "support@example.com"
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "http://localhost:8080/api/v1"
    description: "Local Development Server"
  - url: "https://api.labyrinthgame.com/api/v1"
    description: "Production Server"

tags:
  - name: Servers
    description: "Endpoints for registering, updating, discovering, and removing game servers."

paths:
  /servers:
    get:
      tags: [Servers]
      summary: "Retrieve active game servers"
      operationId: "listServers"
      description: |
        Fetch a list of all currently registered and active game servers.
        A server is considered active if it has sent a heartbeat within the configured time frame.
      responses:
        '200':
          description: "Successful response containing an array of game server objects."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GameServer"
              example:
                - id: "d290f1ee-6c54-4b01-90e6-d701748f0851"
                  name: "MCI Pro Labyrinth"
                  uri: "ws://play.example.com:9000"
                  maxPlayers: 4
                  currentPlayerCount: 2
                  status: "LOBBY"
                  lastSeen: "2025-10-07T14:12:00Z"
        '500':
          description: "Internal server error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags: [Servers]
      summary: "Register a new game server"
      operationId: "createServer"
      requestBody:
        required: true
        description: "The initial configuration and contact information for the new game server."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameServerRegistration"
      responses:
        '201':
          description: "Server successfully registered."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameServer"
        '400':
          description: "Invalid request data."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /servers/{serverId}:
    parameters:
      - name: "serverId"
        in: "path"
        required: true
        description: "Unique identifier of the game server."
        schema:
          type: "string"
          format: "uuid"

    put:
      tags: [Servers]
      summary: "Update server status (heartbeat)"
      operationId: "updateServer"
      requestBody:
        required: true
        description: "Partial update object containing dynamic state fields."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameServerUpdate"
      responses:
        '200':
          description: "Server successfully updated."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameServer"
        '404':
          description: "Server not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [Servers]
      summary: "Unregister a game server"
      operationId: "deleteServer"
      responses:
        '204':
          description: "Server successfully unregistered."
        '404':
          description: "Server not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    GameServerRegistration:
      type: object
      required: [name, uri, maxPlayers]
      properties:
        name:
          type: string
          example: "MCI Pro Labyrinth"
        uri:
          type: string
          example: "ws://play.example.com:9000"
        maxPlayers:
          type: integer
          example: 4

    GameServerUpdate:
      type: object
      required: [currentPlayerCount, status]
      properties:
        currentPlayerCount:
          type: integer
          example: 2
        status:
          type: string
          enum: [LOBBY, IN_GAME, FINISHED]
          example: "LOBBY"
          description: |
            Current game state:
              - `LOBBY`: Waiting for players to join
              - `IN_GAME`: Game is currently running
              - `FINISHED`: Game has ended

    GameServer:
      type: object
      allOf:
        - $ref: "#/components/schemas/GameServerRegistration"
        - $ref: "#/components/schemas/GameServerUpdate"
        - type: object
          required: [id, lastSeen]
          properties:
            id:
              type: string
              format: uuid
              example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
            lastSeen:
              type: string
              format: date-time
              example: "2025-10-07T14:12:00Z"

    ErrorResponse:
      type: object
      required: [message]
      properties:
        message:
          type: string
          example: "Server not found"
        code:
          type: integer
          example: 404
        timestamp:
          type: string
          format: date-time
          example: "2025-10-07T14:15:23Z"
